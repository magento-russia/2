<?php
abstract class Df_Core_Block_Abstract extends Mage_Core_Block_Abstract {
	/**
	 * @override
	 * @return string|int
	 */
	public function getId() {
		return
			empty($this->_idFieldName) && is_null($this->_getData('id'))
			? // для использования блоков в коллекциях
			  $this->getAutoGeneratedId()
			: parent::getId()
		;
	}

	/**
	 * @param string $key
	 * @param mixed $default[optional]
	 * @return mixed
	 */
	public function cfg($key, $default = null) {
		/** @var mixed $result */
		/**
		 * Обратите внимание,
		 * что здесь нужно вызывать именно @see Df_Core_Block_Abstract::getData(),
		 * а не @see Varien_Object::_getData()
		 * чтобы работали валидаторы.
		 */
		$result = $this->getData($key);
		// Некоторые фильтры заменяют null на некоторое другое значение,
		// поэтому обязательно учитываем равенство null
		// значения свойства ДО применения фильтров.
		/** @var bool $valueWasNullBeforeFilters */
		$valueWasNullBeforeFilters = df_a($this->_valueWasNullBeforeFilters, $key, true);
		// Раньше вместо !is_null($result) стояло !$result.
		// !is_null выглядит логичней.
		return !is_null($result) && !$valueWasNullBeforeFilters ? $result : $default;
	}

	/**
	 * @override
	 * @return string
	 */
	public function getCacheKey() {
		return !$this->needToShow() ? Df_Core_Block_Template::CACHE_KEY_EMPTY : parent::getCacheKey();
	}

	/**
	 * @override
	 * @return string[]
	 */
	public function getCacheKeyInfo() {
		if (!isset($this->{__METHOD__})) {
			/** @var string[] $result */
			$result = array(get_class($this), Mage::app()->getStore()->getCode());
			if ($this->needCachingPerRequestAction())	{
				$result[]= rm_state()->getController()->getFullActionName();
			}
			if ($this->getCacheKeySuffix()) {
				$result[]= $this->getCacheKeySuffix();
			}
			$result = array_merge($result, rm_array($this->getCacheKeyParamsAdditional()));
			$this->{__METHOD__} = $result;
		}
		return $this->{__METHOD__};
	}

	/** @return string */
	public function getCurrentClassNameInMagentoFormat() {
		if (!isset($this->{__METHOD__})) {
			$this->{__METHOD__} =
				df_h()->core()->reflection()->getModelNameInMagentoFormat(get_class($this))
			;
		}
		return $this->{__METHOD__};
	}

	/**
	 * @throws Mage_Core_Exception
	 * @param string $key
	 * @param null|string|int $index
	 * @return mixed
	 */
	public function getData($key = '', $index = null) {
		/** @var mixed $result */
		if (('' === $key) || array_key_exists($key, $this->_data)) {
			$result = parent::getData($key, $index);
		}
		else {
			// Обрабатываем здесь только те случаи,
			// когда запрашиваются значения неицициализированных свойств объекта
			$result = $this->_applyFilters($key, null);
			// Обратите внимание, что фильтры и валидаторы применяются только единократно,
			// потому что повторно мы в эту ветку кода не попадём
			// из-за срабатывания условия array_key_exists($key, $this->_data) выше
			// (даже если фильтры для null вернут null, наличие ключа array('ключ' => null))
			// достаточно, чтобы не попадать в данную точку программы повторно.
			$this->_validate($key, $result);
			$this->_data[$key] = $result;
		}
		return $result;
	}

	/**
	 * @override
	 * @param string|array(string => mixed) $key
	 * @param mixed $value
	 * @return Df_Core_Block_Abstract
	 */
	public function setData($key, $value = null) {
		/**
		 * Раньше мы проводили валидацию лишь при извлечении значения свойства,
		 * в методе @see Df_Core_Block_Abstract::getData().
		 * Однако затем мы сделали улучшение:
		 * перенести валидацию на более раннюю стадию — инициализацию свойства
		 * @see Df_Core_Block_Abstract::setData(),
		 * и инициализацию валидатора/фильтра
		 * @see Df_Core_Block_Abstract::_prop().
		 * Это улучшило диагностику случаев установки объекту некорректных значений свойств,
		 * потому что теперь мы возбуждаем исключительную ситуацию
		 * сразу при попытке установки некорректного значения.
		 * А раньше, когда мы проводили валидацию лишь при извлечении значения свойства,
		 * то при диагностике было не вполне понятно,
		 * когда конкретно объекту было присвоено некорректное значение свойства.
		 */
		if (is_array($key)) {
			$this->_checkForNullArray($key);
			$key = $this->_applyFiltersToArray($key);
			$this->_validateArray($key);
		}
		else {
			$this->_checkForNull($key, $value);
			$value = $this->_applyFilters($key, $value);
			$this->_validate($key, $value);
		}
		parent::setData($key, $value);
		return $this;
	}

	/**
	 * @param string $key
	 * @param Zend_Validate_Interface|Df_Zf_Validate_Type|string|mixed[] $validator
	 * @param bool|null $isRequired [optional]
	 * @throws Df_Core_Exception_Internal
	 * @return Df_Core_Block_Abstract
	 */
	protected function _prop($key, $validator, $isRequired = null) {
		/** @var mixed[] $arguments */
		$arguments = func_get_args();
		/**
		 * Обратите внимание, что если метод _prop() был вызван с двумя параметрами,
		 * то и count($arguments) вернёт 2,
		 * хотя в методе _prop() всегда доступен и 3-х параметр: $isRequired.
		 * Другими словами, @see func_get_args() не возвращает параметры по умолчанию,
		 * если они не были реально указаны при вызове текущего метода.
		 */
		if (2 < count($arguments)) {
			$isRequired = rm_last($arguments);
			/** @var bool $hasRequiredFlag */
			$hasRequiredFlag = is_bool($isRequired) || is_null($isRequired);
			if ($hasRequiredFlag) {
				$validator = array_slice($arguments, 1, -1);
			}
			else {
				$isRequired = null;
				$validator = rm_tail($arguments);
			}
		}
		/** @var Zend_Validate_Interface[] $additionalValidators */
		$additionalValidators = array();
		/** @var Zend_Filter_Interface[] $additionalFilters */
		$additionalFilters = array();
		if (!is_array($validator)) {
			$validator =
				$this->_resolveValidatorOrFilter(
					$validator
					, $key
					/**
					 * Если значение флага $isRequired не указано,
					 * то ради ускорения системы используем в качестве валидатора объект-одиночку.
					 * Если же значение флага $isRequired указано,
					 * то использовать объект-одиночку нельзя:
					 * ведь для каждого такого валидатора значение флага может быть своим
					 */
					, $useSingleton = is_null($isRequired)
				)
			;
			df_assert($validator instanceof Zend_Validate_Interface);
		}
		else {
			/** @var array(Zend_Validate_Interface|Df_Zf_Validate_Type|string) $additionalValidatorsRaw */
			$additionalValidatorsRaw = rm_tail($validator);
			$validator =
				$this->_resolveValidatorOrFilter(
					rm_first($validator)
					, $key
					/**
					 * Если значение флага $isRequired не указано,
					 * то ради ускорения системы используем в качестве валидатора объект-одиночку.
					 * Если же значение флага $isRequired указано,
					 * то использовать объект-одиночку нельзя:
					 * ведь для каждого такого валидатора значение флага может быть своим
					 */
					, $useSingleton = is_null($isRequired)
				)
			;
			df_assert($validator instanceof Zend_Validate_Interface);
			foreach ($additionalValidatorsRaw as $additionalValidatorRaw) {
				/** @var Zend_Validate_Interface|Zend_Filter_Interface|string $additionalValidatorsRaw */
				/** @var Zend_Validate_Interface|Zend_Filter_Interface $additionalValidator */
				$additionalValidator = $this->_resolveValidatorOrFilter($additionalValidatorRaw, $key);
				if ($additionalValidator instanceof Zend_Validate_Interface) {
					$additionalValidators[]= $additionalValidator;
				}
				if ($additionalValidator instanceof Zend_Filter_Interface) {
					$additionalFilters[]= $additionalValidator;
				}
			}
		}
		$this->_addValidator($key, $validator, $isRequired);
		if ($validator instanceof Zend_Filter_Interface) {
			/** @var Zend_Filter_Interface $filter */
			$filter = $validator;
			$this->_addFilter($key, $filter);
		}
		foreach ($additionalFilters as $additionalFilter) {
			/** @var Zend_Filter_Interface $additionalFilter */
			$this->_addFilter($key, $additionalFilter);
		}
		/**
		 * Раньше мы проводили валидацию лишь при извлечении значения свойства,
		 * в методе @see Df_Core_Block_Abstract::getData().
		 * Однако затем мы сделали улучшение:
		 * перенести валидацию на более раннюю стадию — инициализацию свойства
		 * @see Df_Core_Block_Abstract::setData(),
		 * и инициализацию валидатора/фильтра
		 * @see Df_Core_Block_Abstract::_prop().
		 * Это улучшило диагностику случаев установки объекту некорректных значений свойств,
		 * потому что теперь мы возбуждаем исключительную ситуацию
		 * сразу при попытке установки некорректного значения.
		 * А раньше, когда мы проводили валидацию лишь при извлечении значения свойства,
		 * то при диагностике было не вполне понятно,
		 * когда конкретно объекту было присвоено некорректное значение свойства.
		 */
		/** @var bool $hasValueVorTheKey */
		$hasValueVorTheKey = array_key_exists($key, $this->_data);
		if ($hasValueVorTheKey) {
			$this->_validateByConcreteValidator($key, $this->_data[$key], $validator);
		}
		foreach ($additionalValidators as $additionalValidator) {
			/** @var Zend_Validate_Interface $additionalValidator */
			$this->_addValidator($key, $additionalValidator);
			if ($hasValueVorTheKey) {
				$this->_validateByConcreteValidator($key, $this->_data[$key], $additionalValidator);
			}
		}
		return $this;
	}
	/** @var array(string => Zend_Filter_Interface[]) */
	private $_filters = array();
	/** @var array(string => Zend_Validate_Interface[]) */
	private $_validators = array();

	/** @return string */
	protected function getCacheKeySuffix() {return $this->cfg(self::P__CACHE_KEY_SUFFIX);}

	/**
	 * @override
	 * @return int|null|bool
	 */
	public function getCacheLifetime() {
		return $this->needCaching() ? Df_Core_Block_Template::CACHE_LIFETIME_STANDARD : null;
	}

	/** @return string[] */
	protected function getCacheKeyParamsAdditional() {return array();}

	/** @return bool */
	protected function needCaching() {return true;}

	/** @return bool */
	protected function needCachingPerRequestAction() {return false;}

	/** @return bool */
	protected function needToShow() {return true;}

	/**
	 * @param string $key
	 * @param Zend_Filter_Interface|string $filter
	 * @return void
	 */
	private function _addFilter($key, $filter) {
		if (is_string($filter)) {
			$filter = self::_getValidatorByName($filter);
		}
		df_assert(is_object($filter));
		df_assert($filter instanceof Zend_Filter_Interface);
		if (!isset($this->_filters[$key])) {
			$this->_filters[$key] = array();
		}
		$this->_filters[$key][] = $filter;
		/**
		 * Не используем @see isset(), потому что для массива
		 * $array = array('a' => null)
		 * isset($array['a']) вернёт false,
		 * что не позволит нам фильтровать значения параметров,
		 * сознательно установленные в null при конструировании объекта.
		 */
		if (array_key_exists($key, $this->_data)) {
			$this->_data[$key] = $filter->filter($this->_data[$key]);
		}
	}

	/**
	 * @param string $key
	 * @param Zend_Validate_Interface $validator
	 * @param bool|null $isRequired [optional]
	 * @return void
	 */
	private function _addValidator($key, Zend_Validate_Interface $validator, $isRequired = null) {
		/**
		 * Обратите внимание, что здесь ошибочно писать
		 		$isRequired = rm_bool($isRequired);
		 * потому что $isRequired может принимать не только значения true/false,
		 * но и отличное от них по смыслу значение null.
		 */
		/**
		 * Обратите внимание, что флаг $RM_VALIDATOR__REQUIRED надо устанавливать в любом случае,
		 * потому что у нас подавляющее большинство валидаторов является объектами-одиночками,
		 * и нам надо сбросить предыдущее значение $isRequired у этого объекта.
		 */
		$validator->{self::$RM_VALIDATOR__REQUIRED} = $isRequired;
		if (!isset($this->_validators[$key])) {
			$this->_validators[$key] = array();
		}
		$this->_validators[$key][] = $validator;
	}

	/**
	 * @param string $key
	 * @param mixed $value
	 * @return mixed
	 */
	private function _applyFilters($key, $value) {
		/** @var Zend_Filter_Interface[] $filters */
		$filters = df_a($this->_filters, $key, array());
		foreach ($filters as $filter) {
			/** @var Zend_Filter_Interface $filter */
			$value = $filter->filter($value);
		}
		return $value;
	}

	/**
	 * @param array(string => mixed) $params
	 * @return array(string => mixed)
	 */
	private function _applyFiltersToArray(array $params) {
		foreach ($params as $key => $value) {
			/** @var string $key */
			/** @var mixed $value */
			$params[$key] = $this->_applyFilters($key, $value);
		}
		return $params;
	}

	/**
	 * @param string $key
	 * @param mixed $value
	 * @return void
	 */
	private function _checkForNull($key, $value) {
		$this->_valueWasNullBeforeFilters[$key] = is_null($value);
	}
	/** @var array(string => bool) */
	private $_valueWasNullBeforeFilters = array();

	/**
	 * @param array(string => mixed) $params
	 * @return void
	 */
	private function _checkForNullArray(array $params) {
		foreach ($params as $key => $value) {
			/** @var string $key */
			/** @var mixed $value */
			$this->_checkForNull($key, $value);
		}
	}

	/**
	 * @param Zend_Validate_Interface|Zend_Filter_Interface|string $validator
	 * @param string $key
	 * @param bool $useSingleton [optional]
	 * @return Zend_Validate_Interface|Zend_Filter_Interface
	 */
	private function _resolveValidatorOrFilter($validator, $key, $useSingleton = true) {
		/** @var Zend_Validate_Interface|Zend_Filter_Interface $result */
		if (is_object($validator)) {
			$result = $validator;
		}
		else if (is_string($validator)) {
			$result = self::_getValidatorByName($validator, $useSingleton);
		}
		else {
			df_error_internal(
				'Валидатор/фильтр поля «%s» класса «%s» имеет недопустимый тип: «%s».'
				,$key, get_class($this), gettype($validator)
			);
		}
		if (
				!($result instanceof Zend_Validate_Interface)
			&&
				!($result instanceof Zend_Filter_Interface)
		) {
			df_error_internal(
				'Валидатор/фильтр поля «%s» класса «%s» имеет недопустимый класс «%s»,'
				. ' у которого отсутствуют требуемые интерфейсы'
				.' Zend_Validate_Interface и Zend_Filter_Interface.'
				,$key, get_class($this), get_class($result)
			);
		}
		return $result;
	}

	/**
	 * @param string $key
	 * @param mixed $value
	 * @throws Df_Core_Exception_Internal
	 * @return void
	 */
	private function _validate($key, $value) {
		/** @var @var array(Zend_Validate_Interface|Df_Zf_Validate_Type) $validators */
		$validators = df_a($this->_validators, $key, array());
		foreach ($validators as $validator) {
			/** @var Zend_Validate_Interface|Df_Zf_Validate_Type $validator */
			$this->_validateByConcreteValidator($key, $value, $validator);
		}
	}

	/**
	 * @param array(string => mixed) $params
	 * @throws Df_Core_Exception_Internal
	 * @return void
	 */
	private function _validateArray(array $params) {
		foreach ($params as $key => $value) {
			/** @var string $key */
			/** @var mixed $value */
			$params[$key] = $this->_validate($key, $value);
		}
	}

	/**
	 * @param string $key
	 * @param mixed $value
	 * @param Zend_Validate_Interface|Df_Zf_Validate_Type $validator
	 * @throws Df_Core_Exception_Internal
	 * @return void
	 */
	private function _validateByConcreteValidator($key, $value, Zend_Validate_Interface $validator) {
		if (!(
				is_null($value)
			&&
				/**
				 * Обратите внимание, что если значение свойства равно NULL,
				 * то isset($validator->{self::$RM_VALIDATOR__REQUIRED}) вернёт false,
				 * в то время как @see property_exists() вернёт true.
				 */
				property_exists($validator, self::$RM_VALIDATOR__REQUIRED)
			&&
				/**
				 * Здесь должна стоять проверка именно на false,
				 * потому что помимо true/false
				 * $validator->{self::$RM_VALIDATOR__REQUIRED})
				 * может принимать значение null
				 */
				(false === $validator->{self::$RM_VALIDATOR__REQUIRED})
		)) {
			if (!$validator->isValid($value)) {
				/** @var string $compositeMessage */
				$compositeMessage =
					rm_sprintf(
						"«%s»: значение %s недопустимо для свойства «%s»."
						. "\r\nСообщение проверяющего:\r\n%s"
						,get_class($this)
						,df_h()->qa()->convertValueToDebugString($value)
						,$key
						,implode(Df_Core_Const::T_NEW_LINE, $validator->getMessages())
					)
				;
				$exception = new Df_Core_Exception_Internal($compositeMessage);
				/** @var Mage_Core_Model_Message $coreMessage */
				$coreMessage = df_model('core/message');
				$exception->addMessage(
					$coreMessage->error($compositeMessage, __CLASS__,  __METHOD__)
				);
				throw $exception;
			}
		}
	}

	/** @return string */
	private function getAutoGeneratedId() {
		if (!isset($this->{__METHOD__})) {
			$this->{__METHOD__} = rm_uniqid();
		}
		return $this->{__METHOD__};
	}

	/**
	 * @override
	 * @return void
	 */
	protected function _construct() {
		if ($this->_data) {
			$this->_checkForNullArray($this->_data);
			/**
			 * Фильтры мы здесь пока применять не можем,
			 * потому что они ещё не инициализированны
			 * (фильтры будут инициализированы потомками
			 * уже после вызова @see Df_Core_Block_Abstract::_construct()).
			 * Вместо этого применяем фильтры для начальных данных
			 * в методе @see Df_Core_Block_Abstract::_prop(),
			 * а для дополнительных данных — в методе @see Df_Core_Block_Abstract::setData().
			 */
		}
		parent::_construct();
		$this->_prop(self::P__CACHE_KEY_SUFFIX, self::V_STRING);
	}

	/** @var string */
	private static $RM_VALIDATOR__REQUIRED = 'rm__required';
	const _CLASS = __CLASS__;
	const F_TRIM = 'filter-trim';
	const P__CACHE_KEY_SUFFIX = 'rm__cache_key_suffix';
	const P__NAME = 'name';
	const P__TYPE = 'type';
	const V_ARRAY = 'array';
	const V_BOOL = 'boolean';
	const V_FLOAT = 'float';
	const V_INT = 'int';
	const V_NAT = 'nat';
	const V_NAT0 = 'nat0';
	const V_STRING_NE = 'string';
	const V_STRING = 'string_empty';

	/**
	 * @param string $class
	 * @param string|string[] $functions
	 * @return string[]
	 */
	protected static function m($class, $functions) {
		df_assert($functions);
		/** @var string[] $result */
		$result = array();
		if (!is_array($functions)) {
			/** @var mixed[] $arguments */
			$arguments = func_get_args();
			$functions = rm_tail($arguments);
		}
		foreach ($functions as $function) {
			/** @var string $function */
			$result[]= $class . '::' . $function;
		}
		return $result;
	}

	/**
	 * @static
	 * @param string $validatorName
	 * @param bool $useSingleton [optional]
	 * @return Zend_Validate_Interface
	 */
	private static function _getValidatorByName($validatorName, $useSingleton = true) {
		/** @var array(string => Zend_Validate_Interface) $map */
		static $map;
		if (!isset($map)) {
			$map = array(
				self::F_TRIM => Df_Zf_Filter_String_Trim::s()
				,self::V_ARRAY => Df_Zf_Validate_Array::s()
				,self::V_BOOL => Df_Zf_Validate_Boolean::s()
				,self::V_FLOAT => Df_Zf_Validate_Float::s()
				,self::V_INT => Df_Zf_Validate_Int::s()
				,self::V_NAT => Df_Zf_Validate_Nat::s()
				,self::V_NAT0 => Df_Zf_Validate_Nat0::s()
				,self::V_STRING => Df_Zf_Validate_String::s()
				,self::V_STRING_NE => Df_Zf_Validate_String_NotEmpty::s()
			);
		}
		/** @var Zend_Validate_Interface $result */
		$result = df_a($map, $validatorName);
		if ($result) {
			if (!$useSingleton) {
				/** @var string $class */
				$class = get_class($result);
				$result = new $class;
			}
		}
		else {
			if (@class_exists($validatorName) || @interface_exists($validatorName)) {
				$result =
					$useSingleton
					? Df_Zf_Validate_Class::s($validatorName)
					: Df_Zf_Validate_Class::i($validatorName)
				;
			}
			else {
				df_error_internal('Система не смогла распознать валидатор «%s».', $validatorName);
			}
		}
		return $result;
	}
}